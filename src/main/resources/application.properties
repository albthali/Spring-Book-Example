spring.datasource.url=jdbc:mysql://${books_database_host}:${books_database_port}/${books_database_name}
spring.datasource.username=${books_database_username}
spring.datasource.password=${books_database_password}
spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver
spring.redis.port=${REDIS_PORT}
spring.redis.host=${REDIS_HOST}
spring.redis.password=${REDIS_PASSWORD}
spring.liquibase.change-log=liquibase-changeLog.xml
server.port=${PORT}
server.ssl.key-store-type=PKCS12
server.ssl.key-store=/etc/ssl/certs/book.p12
server.ssl.key-store-password=password
server.ssl.key-alias=book
server.ssl.enabled=true
sql.user.getUsername=SELECT username, password, enabled FROM users WHERE username = ? AND enabled = true
sql.user.new=INSERT INTO users (username, password, enabled) VALUES ( ? , ? , ? )
sql.book.new=INSERT INTO books (name, author, description, owner, visibility) VALUES (?, ?, ?, ?, ?)
sql.book.getByUsername= SELECT id, name, author, description, owner, visibility FROM books WHERE owner = ?
sql.book.getAll= SELECT id, name, author, description, owner, visibility FROM books WHERE visibility = 'public'
sql.book.queryBooks= SELECT id, name, author, description, owner, visibility FROM books WHERE visibility = 'public' AND (name LIKE CONCAT('%', ? ,'%') OR author LIKE CONCAT('%', ? ,'%') OR description LIKE CONCAT('%', ? ,'%'))
sql.book.getByUsernamePublic= SELECT id, name, author, description, owner, visibility FROM books WHERE visibility = 'public' AND owner = ?
sql.book.patchVisibility= UPDATE books set visibility = ? WHERE id = ? AND owner = ? 
sql.book.getUserBookById =SELECT id, name, author, description, owner, visibility FROM books WHERE owner = ? AND id = ?
sql.book.delete=DELETE FROM `books` WHERE id = ? AND owner = ? 
